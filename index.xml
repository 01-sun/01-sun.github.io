<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LITOU&#39;s BLOG</title>
    <link>https://01-sun.github.io/</link>
    <description>Recent content on LITOU&#39;s BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 06 Jun 2021 01:50:11 +0800</lastBuildDate><atom:link href="https://01-sun.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UE4动画制作-教程</title>
      <link>https://01-sun.github.io/post/ue4-%E8%A7%92%E8%89%B2%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sun, 06 Jun 2021 01:50:11 +0800</pubDate>
      
      <guid>https://01-sun.github.io/post/ue4-%E8%A7%92%E8%89%B2%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0/</guid>
      <description>游戏动画
UE4的角色动画实现
游戏动画   what：动作过程。
  why:实现游戏角色的走、跑、游泳、攻击等行为。
  how：帧动画、骨骼动画等。
  主要动画分类： 帧动画：
  What：帧动画的每一帧都是角色特定姿势的一个快照，帧动画的每一帧都是角色特定姿势的一个快照，动画的流畅性和平滑效果都取决于帧数的多少。常见于cocos2dx引擎
  Advantage：1、适合需要复杂细腻的效果。2、可添加事件
  Diadvantage：1、耗内存。2、不灵活
  骨骼动画：
  what：而骨骼动画则是把角色的各部分身体部件图片绑定到一根根互相作用连接的“骨头”上，通过控制这些骨骼的位置、旋转方向和放大缩小而生成的动画。
  Advantage：1、内存少 2、灵活（混合动画）
  Diadvantage：1、更高的处理器。
   UE4的角色动画实现-骨骼动画 几个概念 ：   骨骼/骨架(skelton)：骨骼动画的基础，能挂载动画，用于生成动画序列
  动画序列（animation sequence）：某个骨骼动画
  混合空间（Blend Space）：两个骨骼动画之间创建过渡动画
  动画蓝图（Animation Blueprint）:添加运行动画的条件，实现逻辑动画
  根骨骼位移（Root Motion）:解决位移和动画不一致问题，简单动作可以不用 详细
  流程 ：   获取3d模型：</description>
    </item>
    
    <item>
      <title>Lua设计与实现-笔记</title>
      <link>https://01-sun.github.io/post/lua%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 24 Feb 2021 08:24:11 +0800</pubDate>
      
      <guid>https://01-sun.github.io/post/lua%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0/</guid>
      <description>前言 用了一年多的lua，却对这个语言只是止于使用，乘着过年放假，把这本《lua设计与实现》读完。作者用最通俗易懂的语言讲述lua的底层实现，对lua从数据类型到虚拟机，再到回收机制进行层层剖析，使得笔者对lua有大体了解，而又好记性不如烂笔头，因此作此笔记。
 通用数据类型 目标： 不同时刻同一变量指向不同数据类型
思路：需要两个字段，一个存储数据类型，一个存储数据
实现：通过union和struct，之间嵌套、有机结合形成lua_TValue，来统一表示所有数据类型。可进行GC（垃圾回收）操作的数据有CommonHeader宏定义的成员
注：number不是可GC类型
lua通用数据结构组织（如图）
 字符串-string 目标：尽可能提高效率存储字符串
思路：存储字符串的变量是对该字符串的引用，所以需要两个字段，一个存储字符串的长度，一个存储字符串数据的引用（散列值）
实现：
typedef uinion TString{ L_Umaxalign dumy; //对齐变量 （节省空间）  struct{ commonHeader; //GC宏  lu_byte reserved; //表示是不是保留字符串  unsigned int hash;//散列值  size_t len; //字符串长度  }tsu; }TString; 特点：
“内化”：字符串变量是对字符串的引用，当创建字符串前先检查全局数据区有无该串，无则创建，有则引用。（ps：用时间换空间，同时lua的查找算法效率也很高）
“散列值”：加快对字符串数据比较和查找
存储：
所有字符串存储在全局数据区，该区为全局变量global_state的str成员,str本质为散列数组
typedef struct stringtable{ GCObject **hash; lu_int32 nuse; //元素值  int size; }stringtable; 创建字符串Tstring，首先根据散列算法算出散列值，为str的索引值，若位置上已有值，则用链表串联起来
rehash（重新哈希）:当散列桶中数量非常大，算法效率急速下降，所以需要重新分配散列桶数量，来降低每个桶中的数量（luaS_resize()）
lua_Tip:
尽量少用大量循环来连接字符串，因为每次连接都会产生新串，费时又费空间。而用表来做字符串缓冲区（先用表循环存储，再用table.concat连接），会节省空间,提高效率。
 表-table 目标：存储所有数据类型，并对使用者透明
思路：两个部分，分数组和散列表
实现：
type struct Table{ CommonHeader; lu_byte flags; //提供元方法标志  lu_byte lsizenode; //以2为第的散列桶大小  struct Table *metable; //远比闹  TValue *array; //数组部分指针  Node *node; //散列桶起始位置  Node *lastfree; //散列桶最后位置  GCObject *gclist; int sizearray; //数组部分大小 } 重要操作</description>
    </item>
    
  </channel>
</rss>
